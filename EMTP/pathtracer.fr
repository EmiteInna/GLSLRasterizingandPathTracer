#version 460 core
out vec4 FragColor;
out vec4 outdata;

in vec2 coord;
uniform samplerBuffer Triangles;
uniform samplerBuffer Vertices;
uniform samplerBuffer Nodes;
uniform samplerBuffer Materials;
uniform sampler2D lastframe;
uniform float NodeStride;
uniform float VertexStride;
uniform float TriangleStride;
uniform float MaterialStride;
uniform vec3 WorldSpaceCameraPos;
uniform vec3 WorldSpaceCameraDir;
uniform float CameraFOV;
uniform float CameraAspect;
uniform float frame;
uniform int bounce;


uniform sampler2D KleeHair;
uniform sampler2D KleeFace;
uniform sampler2D KleeCloth;
uniform sampler2D CubeHouseBasemap;
uniform sampler2D LightBasemap;
int float2int(float f){
	return int(f+0.1);
}
struct Vertex{
	vec3 position;
	vec2 uv;
	vec3 normal;
};
struct Triangle{
	Vertex p1;
	Vertex p2;
	Vertex p3;
	float meshIndex;
};

struct Ray{
	vec3 startPoint;
	vec3 direction;
};
struct RayHit{
	bool isInner;
	bool isHit;
	float distance;
	vec3 hitPoint;
	vec3 normal;
	vec3 rayDir;
	vec2 texcoord;
	float meshIndex;
};
struct Material{
	vec3 emissive;
	vec3 baseColor;
	float subsurface;
	float metallic;
	float specular;
	float specularTint;
	float roughness;
	float anisotropic;
	float sheen;
	float sheenTint;
	float clearcoat;
	float clearcoatGloss;
	float IOR;
	float transmission;
};
struct Node{
	int triangleIndex;
	int l;
	int r;
	vec3 AA;
	vec3 BB;
};
vec4 SampleMeshTexture(vec2 uv,float meshID){
	int mid=float2int(meshID);
	vec4 ret=vec4(1);
	if(mid==0){
		ret= texture(KleeHair,uv);
	}
	else if(mid==1){
		ret= texture(KleeFace,uv);
	}
	else if(mid==2){
		ret= texture(KleeCloth,uv);
	}
	else if(mid==3){
		ret= texture(CubeHouseBasemap,uv);
	}else if(mid==4){
		ret= texture(LightBasemap,uv);
	}
	return ret;
}

int IndexNode(int id){
	return id*float2int(NodeStride);
}
int IndexVertex(int id){
	return id*float2int(VertexStride);
}
int IndexTriangle(int id){
	return id*float2int(TriangleStride);
}
int IndexMaterial(int id){
	return id*float2int(MaterialStride);
}
Material DecodeMaterial(int id){
	Material ret;
	vec3 p1=texelFetch(Materials,id).xyz;
	vec3 p2=texelFetch(Materials,id+1).xyz;
	vec3 p3=texelFetch(Materials,id+2).xyz;
	vec3 p4=texelFetch(Materials,id+3).xyz;
	vec3 p5=texelFetch(Materials,id+4).xyz;
	vec3 p6=texelFetch(Materials,id+5).xyz;
	ret.emissive=p1;
	ret.baseColor=p2;
	ret.subsurface=p3.x;
	ret.metallic=p3.y;
	ret.specular=p3.z;
	ret.specularTint=p4.x;
	ret.roughness=p4.y;
	ret.anisotropic=p4.z;
	ret.sheen=p5.x;
	ret.sheenTint=p5.y;
	ret.clearcoat=p5.z;
	ret.clearcoatGloss=p6.x;
	ret.IOR=p6.y;
	ret.transmission=p6.z;
	return ret;
}
RayHit CountRayHit(Triangle tri,Ray ray){
	RayHit ret;
	ret.distance=10000.;
	ret.isHit=false;
	ret.isInner=false;
	ret.meshIndex=tri.meshIndex;
	vec3 p1=tri.p1.position;
	vec3 p2=tri.p2.position;
	vec3 p3=tri.p3.position;
	vec3 pN=normalize(cross(p2-p1,p3-p1));
	if(dot(ray.direction,pN)>-0.0001){
		pN=-pN;
		ret.isInner=true;
	}
	if(abs(dot(pN,ray.direction))<0.0001f)return ret;
	float dis=(dot(pN,p1)-dot(ray.startPoint,pN))/dot(ray.direction,pN);
	if(dis<0)return ret;
	vec3 hit=ray.startPoint+ray.direction*dis;
	vec3 cross1=cross(p2-p1,hit-p1);
	vec3 cross2=cross(p3-p2,hit-p2);
	vec3 cross3=cross(p1-p3,hit-p3);
	float d1=dot(cross1,pN);
	float d2=dot(cross2,pN);
	float d3=dot(cross3,pN);
	if(d1*d2>-0.001&&d2*d3>-0.001&&d1*d3>-0.001){
		ret.isHit=true;
		ret.distance=dis;
		ret.hitPoint=hit;
		ret.rayDir=ray.direction;
		float eps=0.000001;
		float a=0,b=0,c=0;
		if(abs(dot(pN,vec3(0,0,1)))>0.001&&abs(dot(pN,vec3(0,0,-1)))>0.001){
			a=(-(hit.x-p2.x)*(p3.y-p2.y)+(hit.y-p2.y)*(p3.x-p2.x))/
				(-(p1.x-p2.x-eps)*(p3.y-p2.y+eps)+(p1.y-p2.y+eps)*(p3.x-p2.x+eps));
			b=(-(hit.x-p3.x)*(p1.y-p3.y)+(hit.y-p3.y)*(p1.x-p3.x))/
				(-(p2.x-p3.x-eps)*(p1.y-p3.y+eps)+(p2.y-p3.y+eps)*(p1.x-p3.x+eps));
			c=1-a-b;
		}else{
			a=(-(hit.x-p2.x)*(p3.z-p2.z)+(hit.z-p2.z)*(p3.x-p2.x))/
				(-(p1.x-p2.x-eps)*(p3.z-p2.z+eps)+(p1.z-p2.z+eps)*(p3.x-p2.x+eps));
			b=(-(hit.x-p3.x)*(p1.z-p3.z)+(hit.z-p3.z)*(p1.x-p3.x))/
				(-(p2.x-p3.x-eps)*(p1.z-p3.z+eps)+(p2.z-p3.z+eps)*(p1.x-p3.x+eps));
			c=1-a-b;
		}
		
		ret.texcoord=tri.p1.uv*a+tri.p2.uv*b+tri.p3.uv*c;
		ret.normal=tri.p1.normal*a+tri.p2.normal*b+tri.p3.normal*c;
		ret.normal=normalize(ret.normal);
		if(ret.isInner==true)ret.normal=-ret.normal;
	}
	return ret;
}
Ray GetRayFromScreenCoord(vec2 coord){
	Ray ret;
	ret.startPoint=WorldSpaceCameraPos;
	float lane=1.0;
	float height=lane*tan(CameraFOV/2.0);
	float width=height*CameraAspect;
	vec3 normCameraFront=normalize(WorldSpaceCameraDir);
	vec3 normCameraRight=normalize(-cross(vec3(0,1.0,0),normCameraFront));
	vec3 normCameraUp=normalize(cross(normCameraRight,normCameraFront));
	vec3 dir=normCameraFront*lane+normCameraRight*width*coord.x+normCameraUp*height*coord.y;
	ret.direction=normalize(dir);
	return ret;
}
float IntersectBox(Ray r,vec3 aa,vec3 bb){
	vec3 AA=aa;
	vec3 BB=bb;
	vec3 idir=1.0/r.direction;
	vec3 far=(BB-r.startPoint)*idir;
	vec3 near=(AA-r.startPoint)*idir;
	vec3 mx=max(far,near);
	vec3 mi=min(far ,near);
	float mimx=min(mx.x,min(mx.y,mx.z));
	float mxmi=max(mi.x,max(mi.y,mi.z));
	float ret=-1;
	if(mimx>=mxmi){
		if(mxmi>0)ret= mxmi;
		else ret= mimx;
	}
	return ret;
}

RayHit hitBVH(Ray ray){
	int nodenum[256];
	float nodedis[256];
	int right=-1;

	float debug=0;
	RayHit ret;
	
	ret.isHit=false;
	ret.distance=100000.;
	ret.isInner=false;
	ret.hitPoint=vec3(0);
	ret.normal=vec3(0);
	ret.rayDir=vec3(0);
	ret.texcoord=vec2(0);
	ret.meshIndex=1;

	vec3 aa=texelFetch(Nodes,IndexNode(1)+1).xyz;
	vec3 bb=texelFetch(Nodes,IndexNode(1)+2).xyz;
	float dis=IntersectBox(ray,aa,bb);
	right++;
	nodenum[right]=1;
	nodedis[right]=dis;
	while(right>=0&&right<3000){
		
		
		vec3 tlr=texelFetch(Nodes,IndexNode(nodenum[right])).xyz;
		if(nodedis[right]>=1.2*ret.distance){
			right--;
			continue;
		}
		
		right--; 
		if(tlr.x<0){
			int l=float2int(tlr.y);
			int r=float2int(tlr.z);
			vec3 aal=texelFetch(Nodes,IndexNode(l)+1).xyz;
			vec3 bbl=texelFetch(Nodes,IndexNode(l)+2).xyz;
			vec3 aar=texelFetch(Nodes,IndexNode(r)+1).xyz;
			vec3 bbr=texelFetch(Nodes,IndexNode(r)+2).xyz;
			float disl=IntersectBox(ray,aal,bbl);
			float disr=IntersectBox(ray,aar,bbr);
			if(disl>0&&disr>0){
				if(disl>disr){
						right++;
						nodenum[right]=l;
						nodedis[right]=disl;
						right++;
						nodenum[right]=r;
						nodedis[right]=disr;
				}else{
						right++;
						nodenum[right]=r;
						nodedis[right]=disr;
						right++;
						nodenum[right]=l;
						nodedis[right]=disl;
				}

			} 
			if(disl>0.0&&disr<=0.0){
				right++;
				nodenum[right]=l;
				nodedis[right]=disl;
			}
			if(disr>0.0&&disl<=0.0){
				right++;
				nodenum[right]=r;
				nodedis[right]=disr;
			}
		}else{
			debug=1;
			int trid=float2int(tlr.x);
			vec4 vids=texelFetch(Triangles,IndexTriangle(trid));
			Triangle tri;
			Vertex v1;
			v1.position=texelFetch(Vertices,IndexVertex(float2int(vids.x))).xyz;
			v1.uv=texelFetch(Vertices,IndexVertex(float2int(vids.x))+1).xy;
			v1.normal=texelFetch(Vertices,IndexVertex(float2int(vids.x))+2).xyz;
			Vertex v2;
			v2.position=texelFetch(Vertices,IndexVertex(float2int(vids.y))).xyz;
			v2.uv=texelFetch(Vertices,IndexVertex(float2int(vids.y))+1).xy;
			v2.normal=texelFetch(Vertices,IndexVertex(float2int(vids.y))+2).xyz;
			Vertex v3;
			v3.position=texelFetch(Vertices,IndexVertex(float2int(vids.z))).xyz;
			v3.uv=texelFetch(Vertices,IndexVertex(float2int(vids.z))+1).xy;
			v3.normal=texelFetch(Vertices,IndexVertex(float2int(vids.z))+2).xyz;
			tri.p1=v1;
			tri.p2=v2;
			tri.p3=v3;
			tri.meshIndex=vids.w;
			RayHit hit=CountRayHit(tri,ray);
			if(hit.isHit==true&&hit.distance<ret.distance){
				ret=hit;
			}
		}
	}
//	ret.distance=debug;
	return ret;
}

uint seed = uint(
    uint((coord.x * 0.5 + 0.5) * 997)  * uint(1973) + 
    uint((coord.y * 0.5 + 0.5) * 997) * uint(9277) + 
    uint(frame) * uint(26699)) | uint(1);

uint wang_hash(inout uint seed) {
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float rand() {
    return float(wang_hash(seed)) / 4294967296.0;
}

vec3 SampleHemisphere(){
	float z=rand();
	float r=max(0,sqrt(1-z*z));
	float phi=2.0*3.141592657*rand();
	return vec3(r*cos(phi),r*sin(phi),z);
}

vec3 toNormalHemisphere(vec3 v,vec3 N){
	N=normalize(N);
	vec3 tmp=vec3(1,0,0);
	if(abs(N.x)>0.999)tmp=vec3(0,0,1);
	vec3 tangent=normalize(cross(N,tmp));
	vec3 bitangent=normalize(cross(N,tangent));
	return v.x*tangent+v.y*bitangent+v.z*N;
}


vec3 pathTracing(RayHit from,int maxbounce){
	vec3 Lo=vec3(0);
	vec3 last=vec3(1);
	for(int i=0;i<maxbounce;i++){
		Material baseMat=DecodeMaterial(IndexMaterial(float2int(from.meshIndex)));
		vec3 wi=toNormalHemisphere(SampleHemisphere(),from.normal);
		Ray randomRay;
		randomRay.startPoint=from.hitPoint;
		randomRay.direction=wi;
		
		RayHit hit=hitBVH(randomRay);
		float pdf=1.0/(2.0*3.141592657);
		float co=max(0,dot(-from.rayDir,from.normal));
		float ci=max(0,dot(randomRay.direction,from.normal));
		vec3 fr=baseMat.baseColor*SampleMeshTexture(from.texcoord,from.meshIndex).xyz/3.141592657;
		// vec3 fr=baseMat.baseColor*(from.normal.xyz*0.5+0.5)/3.141592657;

		if(hit.isHit==false)break;
		Material newMat=DecodeMaterial(IndexMaterial(float2int(hit.meshIndex)));
		
		vec3 emissive=newMat.emissive;
		Lo+=last*emissive*fr*ci/pdf;
		from=hit;
		last*=fr*ci/pdf;
		Lo=min(Lo,vec3(1,1,1));
		Lo=max(Lo,vec3(0,0,0));
	}
	return Lo;
}

vec3 GetPathTracingColor(Ray ray){
	RayHit ht=hitBVH(ray);
	//RayHit ht;
	// ht.isHit=true;
	// ht.meshIndex=5;
	vec3 ret=vec3(0);
	if(ht.isHit==true){
		Material baseMat=DecodeMaterial(IndexMaterial(float2int(ht.meshIndex)));
	//	return vec3(ht.meshIndex/5);
		// return vec3(0);
		ret= baseMat.emissive+pathTracing(ht,bounce);
	}
	return ret;
}

RayHit BruteForce(Ray ray){
	RayHit ret;
	ret.isHit=false;
	ret.distance=100000.;
	ret.isInner=false;
	ret.hitPoint=vec3(0);
	ret.normal=vec3(0);
	ret.rayDir=vec3(0);
	ret.texcoord=vec2(0);
	ret.meshIndex=1;
	for(int i=0;i<12;i+=float2int(TriangleStride)){
		Triangle tri;
		vec4 rd=texelFetch(Triangles,i);
		tri.meshIndex=rd.w;
		vec4 v1Position=texelFetch(Vertices,float2int(rd.x*VertexStride));
		vec4 v1UV=texelFetch(Vertices,float2int(rd.x*VertexStride+1));
		vec4 v1Normal=texelFetch(Vertices,float2int(rd.x*VertexStride+2));
		Vertex v1;
		v1.position=v1Position.xyz;
		v1.uv=v1UV.xy;
		v1.normal=v1Normal.xyz;
		vec4 v2Position=texelFetch(Vertices,float2int(rd.y*VertexStride));
		vec4 v2UV=texelFetch(Vertices,float2int(rd.y*VertexStride+1));
		vec4 v2Normal=texelFetch(Vertices,float2int(rd.y*VertexStride+2));
		Vertex v2;
		v2.position=v2Position.xyz;
		v2.uv=v2UV.xy;
		v2.normal=v2Normal.xyz;
		vec4 v3Position=texelFetch(Vertices,float2int(rd.z*VertexStride));
		vec4 v3UV=texelFetch(Vertices,float2int(rd.z*VertexStride+1));
		vec4 v3Normal=texelFetch(Vertices,float2int(rd.z*VertexStride+2));
		Vertex v3;
		v3.position=v3Position.xyz;
		v3.uv=v3UV.xy;
		v3.normal=v3Normal.xyz;
		tri.p1=v1;
		tri.p2=v2;
		tri.p3=v3;
		RayHit hit=CountRayHit(tri,ray);
	
		if(hit.isHit==true&&hit.distance<ret.distance){
			ret=hit;
			// ret.normal=vec3(float(i),float(i),float(i))/12.0;

		}
	}
	return ret;
}
// vec3 BruteForceV(Ray ray){
// 	float mx=0.;
// 	for(int i=0;i<=100*int(VertexStride);i+=int(VertexStride)){
// 		vec3 position=texelFetch(Vertices,i*int(VertexStride)).xyz;
// 		vec3 dir=normalize(position-WorldSpaceCameraPos);
// 		mx=max(mx,pow(max(0,dot(dir,ray.direction)),15));
// 	}
// 	return vec3(mx,mx,mx);

	
// }

// vec3 debug(vec2 coord){
// 	if(coord.x<-0.3)
// 		return vec3(0,texelFetch(Nodes,3).y/3,0);
// 	if(coord.x<0.3)
// 		return vec3(0,texelFetch(Nodes,4).y/3,0);
// 	if(coord.x<1)
// 		return vec3(0,texelFetch(Nodes,5).y/3,0);
// }


void main(){
	 Ray ray=GetRayFromScreenCoord(coord);
	// RayHit hit=BruteForce(ray);
	
	vec4 last=texture(lastframe,coord.xy*0.5+0.5);

	vec4 pt=vec4(GetPathTracingColor(ray),1);
	// vec4 pt=vec4(1,0,1,1);
	outdata=mix(last,pt,1.0/min(5.,(frame+1.0)));
	// outdata=vec4(hit.normal*0.5+0.5,1);

// vec3 x=texelFetch(Nodes,IndexNode(stktop())+1).xyz;
// 	vec3 aa=texelFetch(Nodes,IndexNode(stktop())+1).xyz;
// 	vec3 bb=texelFetch(Nodes,IndexNode(stktop())+2).xyz;
// 	float dis=IntersectBox(ray,aa,bb);
// 	// vec4 last=texture(lastframe,coord*0.5+0.5);
// 	stkpush(1,1);
// 	stkpop();
// 	stkclear();

// //	vec3 aa=texelFetch(Nodes,IndexNode(stktop())+2).xyz;
// 	float y=stkdis();
// 	int z=2;
// 	z=IndexNode(z);
// 	z=float2int(y);
// //	float sds=float(nodenum[stktop()+2]+2);
// 	outdata=vec4(right+1.5,right+1.5,right+1.5,1);
}